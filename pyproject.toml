[build-system]
build-backend = "hatchling.build"
requires = ["hatchling", "hatch-vcs"]


[project]
name = "spatialdata-io"
dynamic= [
  "version" # allow version to be set by git tags
]
description = "SpatialData IO for common techs"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [
    {name = "scverse"},
]
maintainers = [
    {name = "scverse", email = "scverse@scverse.scverse"},
]
urls.Documentation = "https://spatialdata-io.readthedocs.io/"
urls.Source = "https://github.com/scverse/spatialdata-io"
urls.Home-page = "https://github.com/scverse/spatialdata-io"
dependencies = [
    "anndata",
    "click",
    "numpy",
    "scanpy",
    "spatialdata>=0.2.6",
    "scikit-image",
    "h5py",
    "joblib",
    "imagecodecs",
    "dask-image",
    "pyarrow",
    "readfcs",
    "tifffile>=2023.8.12",
    "ome-types",
    "glymur",
]

[project.optional-dependencies]
dev = [
    # CLI for bumping the version number
    "bump2version",
    "pre-commit"
]
doc = [
    "sphinx>=4.5",
    "sphinx-book-theme>=1.0.0",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    "sphinx-design",
    "sphinx-click",
    # For notebooks
    "ipython>=8.6.0",
    "sphinx-copybutton",
]
test = [
    "pytest",
    "pytest-cov",
]
# this will be used by readthedocs and will make pip also look for pre-releases, generally installing the latest available version
# update: readthedocs doens't seem to try to install pre-releases even if when trying to install the pre optional-dependency. For
# the moment, if needed, let's add the latest pre-release explicitly here.
pre = [
    "spatialdata>=0.4.0rc0"
]

[tool.coverage.run]
source = ["spatialdata_io"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]

[tool.ruff]
line-length = 120
exclude = [
    ".git",
    ".tox",
    "__pycache__",
    "build",
    "docs/_build",
    "dist",
    "setup.py",
]
lint.select = [
    "F",  # Errors detected by Pyflakes
    "E",  # Error detected by Pycodestyle
    "W",  # Warning detected by Pycodestyle
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "UP",  # pyupgrade
    "RUF100",  # Report unused noqa directives
    "TCH",  # Typing imports
    "NPY",  # Numpy specific rules
    # "PTH",  # Use pathlib
    # "S"  # Security
]
lint.ignore = [
    # Do not catch blind exception: `Exception`
    "BLE001",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public module
    "D100",
    # undocumented-public-class
    "D101",
    # Missing docstring in public method
    "D102",
    # Missing docstring in public function
    "D103",
    # Missing docstring in public package
    "D104",
    # __magic__ methods are are often self-explanatory, allow missing docstrings
    "D105",
    # Missing docstring in public nested class
    "D106",
    # Missing docstring in __init__
    "D107",
    ## Disable one in each pair of mutually incompatible rules
    # We donâ€™t want a blank line before a class docstring
    "D203",
    # 1 blank line required after class docstring
    "D204",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    # We want docstrings to start immediately after the opening triple quote
    "D213",
    # Section underline is over-indented ("{name}")
    "D215",
    # First line should be in imperative mood; try rephrasing
    "D401",
    # First word of the first line should be capitalized: {} -> {}
    "D403",
    # First word of the docstring should not be "This"
    "D404",
    # Section name should end with a newline ("{name}")
    "D406",
    # Missing dashed underline after section ("{name}")
    "D407",
    # Section underline should be in the line following the section's name ("{name}")
    "D408",
    # Section underline should match the length of its name ("{name}")
    "D409",
    # No blank lines allowed between a section header and its content ("{name}")
    "D412",
    # Missing blank line after last section ("{name}")
    "D413",
    # Missing argument description in the docstring
    "D417",
    # camcelcase imported as lowercase
    "N813",
    # module import not at top level of file
    "E402",
    # open()` should be replaced by `Path.open()
    "PTH123",
    # subprocess` call: check for execution of untrusted input - https://github.com/PyCQA/bandit/issues/333
    "S603",
    # Starting a process with a partial executable path
    "S607",
    # Prefer absolute imports over relative imports from parent modules
    "TID252",
    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S311",
    # Unused imports
    "F401",
]

[tool.jupytext]
formats = "ipynb,md"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ['src/spatialdata_io']

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "_version.py"
